// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch"]
}

generator zod {
  provider = "npx zod-prisma-types"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  Account     Account[]
  Session     Session[]
  groups      UsersOnGroups[]
  invitations Invitation[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id        String   @id @default(cuid())
  name      String
  hostId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members     UsersOnGroups[]
  invitations Invitation[]
}

model UsersOnGroups {
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String
  group     Group    @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  groupId   String
  joinedAt  DateTime @default(now())
  invitedBy String

  @@id([userId, groupId])
}

model Invitation {
  id        String           @id @default(cuid())
  group     Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  inviterId String
  invitee   User             @relation(fields: [inviteeId], references: [id])
  inviteeId String
  status    InvitationStatus @default(PENDING)
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
