// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

generator zod {
  provider = "npx zod-prisma-types"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  Account     Account[]
  Session     Session[]
  groups      UsersOnGroups[]
  invitations Invitation[]
  bids        Bid[]
}

model Account {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String @unique
  userId       String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id        String   @id @default(cuid())
  name      String
  hostId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members      UsersOnGroups[]
  invitations  Invitation[]
  auctionCases AuctionCase[]
}

model UsersOnGroups {
  userId    String
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  invitedBy String
  joinedAt  DateTime @default(now())

  @@id([userId, groupId])
}

model Invitation {
  id        String @id @default(cuid())
  groupId   String
  group     Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  inviterId String
  inviter   User   @relation(fields: [inviterId], references: [id])

  inviteeEmail String
  status       InvitationStatus @default(PENDING)
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model AuctionCase {
  id      String @id @default(cuid())
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  caseName    String
  bidStartsAt DateTime
  bidEndsAt   DateTime

  bids Bid[]
}

model Bid {
  id            String      @id @default(cuid())
  auctionCaseId String
  auctionCase   AuctionCase @relation(fields: [auctionCaseId], references: [id], onDelete: Cascade)
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  expectedSalePrice Int     @default(0) // 목표 매도가
  acquisitionCost   Int     @default(0) // 취득비용
  evacuationCost    Int     @default(0) // 명도비용
  repairCost        Int     @default(0) // 수리비
  brokerageFee      Int     @default(0) // 중개수수료
  estimatedInterest Int     @default(0) // 이자비용
  otherCost         Int     @default(0) // 기타비용
  expectedProfit    Int     @default(0) // 기대수익
  biddingPrice      Int     @default(0) // 입찰가
  isExcluded        Boolean @default(false) // 낙찰 제외 여부
  excludedReason    String? // 낙찰 제외 사유
}
